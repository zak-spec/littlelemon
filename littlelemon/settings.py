"""
Django settings for littlelemon project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
import os
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Configurar environ
env = environ.Env(
    # Establecer valores por defecto
    DEBUG=(bool, False),
    ALLOWED_HOSTS=(list, ["*"]),
)

# Leer el archivo .env (debe estar en la raíz del proyecto)
env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'littlelemonAPI',
    # 'rest_framework.authtoken',  # REMOVIDO: Ya no usas TokenAuthentication
    # 'djoser',  # REMOVIDO: Ya tienes implementación propia de registro/auth
    'rest_framework_simplejwt', 
    'rest_framework_simplejwt.token_blacklist',  # Para manejar tokens JWT revocados
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'littlelemon.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'littlelemon.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': env('DB_ENGINE', default='django.db.backends.mysql'),
        'NAME': env('DB_NAME', default='littlelemon'),
        'HOST': env('DB_HOST', default='127.0.0.1'),
        'USER': env('DB_USER', default='root'),
        'PASSWORD': env('DB_PASSWORD', default='123456'),
        'PORT': env('DB_PORT', default='3306'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        # 'rest_framework_xml.renderers.XMLRenderer',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Para APIs modernas, móviles, SPAs
        'rest_framework.authentication.SessionAuthentication',       # Para browsable API y testing en navegador
        # 'rest_framework.authentication.TokenAuthentication',       # Comentado: redundante con JWT (descomentar si necesitas compatibilidad legacy)
        # Configuración recomendada: JWT + Session es suficiente para la mayoría de casos
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # Requiere autenticación por defecto
        # 'rest_framework.permissions.IsAuthenticatedOrReadOnly',  # Permite lectura a todos, pero escritura solo a usuarios autenticados
        
    ],
    'DEFAULT_THROTTLE_CLASSES': [  # CORREGIDO: Debe ser una lista de rutas de clases
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {    # CORREGIDO: Tu diccionario de tasas va aquí
        'anon': '100/minute',        # Tasa para usuarios anónimos (usado por AnonRateThrottle)
        'user': '100/minute',        # Tasa para usuarios autenticados (usado por UserRateThrottle)
        # Puedes definir más "scopes" de throttle aquí si usas throttles personalizados
        # con scopes específicos.
    }
}

# DJOSER = {
#     "USER_ID_FIELD": "username",
# }
# REMOVIDO: Ya no usas Djoser, tienes implementación propia

# ===== CONFIGURACIÓN JWT FINAL =====
SIMPLE_JWT = {
    # Usar valor del .env (1 minuto para desarrollo)
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=1),
    
    # Duración del refresh token: 7 días
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    
    # DESACTIVADO: Evitar problemas con blacklist
    'ROTATE_REFRESH_TOKENS': False,  # ← DESACTIVADO para evitar bugs
    
    # DESACTIVADO: Evitar problemas con blacklist
    'BLACKLIST_AFTER_ROTATION': False,  # ← DESACTIVADO para evitar bugs
    
    # Algoritmo de encriptación
    'ALGORITHM': 'HS256',
      # Tipos de header Authorization aceptados
    'AUTH_HEADER_TYPES': ('Bearer',),
    
    # Clave de signing (usa SECRET_KEY de Django por defecto)
    'SIGNING_KEY': SECRET_KEY,
    
    # Claims del token más básicos
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'TOKEN_TYPE_CLAIM': 'token_type',
    
    # SIMPLIFICADO: Solo AccessToken sin configuraciones complejas
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}